name: DWAS Scanner Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        pip install -e .
    
    - name: Set up test environment
      run: |
        mkdir -p uploads reports htmlcov
        export TESTING=true
        export DATABASE_URL=sqlite:///:memory:
        export REDIS_URL=memory://
    
    - name: Run code quality checks
      run: |
        python -m black --check backend/ scanner/ tests/
        python -m isort --check-only backend/ scanner/ tests/
        python -m flake8 backend/ scanner/ tests/
        python -m mypy backend/ scanner/
    
    - name: Run security checks
      run: |
        python -m bandit -r backend/ scanner/
        python -m safety check
    
    - name: Run unit tests
      run: |
        python -m pytest tests/backend/ tests/scanner/ \
          -m "not integration and not performance and not security" \
          --cov=backend --cov=scanner \
          --cov-report=xml --cov-report=html \
          --junitxml=test-results.xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ \
          -m integration \
          --cov=backend --cov=scanner \
          --cov-append \
          --junitxml=integration-results.xml
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ \
          -m performance \
          --cov=backend --cov=scanner \
          --cov-append \
          --junitxml=performance-results.xml
    
    - name: Run security tests
      run: |
        python -m pytest tests/security/ \
          -m security \
          --cov=backend --cov=scanner \
          --cov-append \
          --junitxml=security-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          integration-results.xml
          performance-results.xml
          security-results.xml
          htmlcov/
    
    - name: Comment PR with test results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          const testResults = fs.readFileSync('test-results.xml', 'utf8');
          
          // Parse and create comment
          const comment = `## Test Results
          
          **Python Version:** ${{ matrix.python-version }}
          
          Tests completed successfully! âœ…
          
          Coverage report available in artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Run Black
      run: python -m black --check backend/ scanner/ tests/
    
    - name: Run isort
      run: python -m isort --check-only backend/ scanner/ tests/
    
    - name: Run Flake8
      run: python -m flake8 backend/ scanner/ tests/
    
    - name: Run MyPy
      run: python -m mypy backend/ scanner/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit
      run: python -m bandit -r backend/ scanner/
    
    - name: Run Safety
      run: python -m safety check
